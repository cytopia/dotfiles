# https://www.gnupg.org/documentation/manuals/gnupg/GPG-Configuration-Options.html
# https://www.gnupg.org/documentation/manuals/gnupg/GPG-Input-and-Output.html
# https://www.gnupg.org/documentation/manuals/gnupg/OpenPGP-Options.html
# https://www.gnupg.org/documentation/manuals/gnupg/Compliance-Options.html
# https://www.gnupg.org/documentation/manuals/gnupg/GPG-Esoteric-Options.html
# https://www.gnupg.org/documentation/manuals/gnupg/Deprecated-Options.html

#------------------------------------------------------------
# Behaviour
#------------------------------------------------------------

# Try to use the GnuPG-Agent. With this option, GnuPG first tries to connect to
# the agent before it asks for a passphrase.
use-agent

# Suppress the initial copyright message.
no-greeting

# Disable inclusion of the version string in ASCII armored output
# Force inclusion of the version string in ASCII armored output.
# * If given once only the name of the program and the major number is emitted,
# * given twice the minor is also emitted,
# * given thrice the micro is added,
# * and given four times an operating system identification is also emitted
no-emit-version

# Disable comment string in clear text signatures and ASCII armored messages
no-comments

# automatic key retrieval: only from local machine
auto-key-locate local


#------------------------------------------------------------
# Display
#------------------------------------------------------------

# Display long key IDs
keyid-format 0xlong

# List all keys (or the specified ones) along with their fingerprints
with-fingerprint


#------------------------------------------------------------
# Encoding
#------------------------------------------------------------

# Assume that command line arguments are given as UTF-8 strings.
utf8-strings

# Set the name of the native character set.
# This is used to convert some informational strings like user IDs to the proper UTF-8 encoding.
display-charset utf-8


#------------------------------------------------------------
# Security
#------------------------------------------------------------

# Refuse to run if GnuPG cannot get secure memory. Defaults to no (i.e. run, but give a warning).
require-secmem

# When verifying a signature made from a subkey, ensure that the cross certification
# "back signature" on the subkey is present and valid. This protects against a subtle
# attack against subkeys that can sign. Defaults to --require-cross-certification for gpg.
require-cross-certification

# GnuPG uses a file to store its internal random pool over invocations.
# This makes random generation faster; however sometimes write operations are not desired.
# This option can be used to achieve that with the cost of slower random generation.
no-random-seed-file

# With –generate-key and –batch, enable the creation of RSA secret keys as large as 8192 bit.
enable-large-rsa

# Force the use of encryption with a modification detection code.
# This is always used with the newer ciphers (those with a blocksize greater than 64 bits),
# or if all of the recipient keys indicate MDC support in their feature flags.
force-mdc


#------------------------------------------------------------
# Algorithm and Ciphers
#------------------------------------------------------------

# List of personal digest preferences. When multiple digests are supported by
# all recipients, choose the strongest one
personal-cipher-preferences AES256 AES192 AES CAST5

# list of personal digest preferences. When multiple ciphers are supported by
# all recipients, choose the strongest one
personal-digest-preferences SHA512 SHA384 SHA256 SHA224

personal-compress-preferences Uncompressed

# message digest algorithm used when signing a key
cert-digest-algo SHA512

# This preference list is used for new keys and becomes the default for "setpref" in the edit menu
default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 Uncompressed
